remark,"CSV-Import-Export"
remark,"Date = Fri Feb 01 11:23:29 2019"
remark,"Version = RSLogix 5000 v19.00"
remark,"Owner = Usuario de Windows"
remark,"Company = mds"
0.3
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,,HORA_MM,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Active,"0=ModbusSlave Program InActive,$N1=ModbusSlave Program Active","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Data_Coils0,"Coils (0XXXX)","INT[4097]","","(RADIX := Binary, Constant := false, ExternalAccess := Read/Write)"
COMMENT,,Mod_Data_Coils0,"unused",,"Mod_Data_Coils0[4096]"
TAG,,Mod_Data_Contacts1,"Contacts (1XXXX)","INT[4097]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
COMMENT,,Mod_Data_Contacts1,"unused",,"Mod_Data_Contacts1[4096]"
TAG,,Mod_Data_HoldReg4,"Holding Registers (4XXXX)","INT[65536]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Data_InpReg3,"Input Registers (3XXXX)","INT[65536]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Node_Address,"Slave (Node) Address 0-255","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Range_Coils0,"Coils RegisterSize (0) in bits 1-65535","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Range_Contacts1,"Contacts RegisterSize (1) in bits 1-65535","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Range_HoldReg4,"Holding Registers Size (4) in words 1-65537","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,Mod_Range_InpReg3,"Input  RegisterSize (3) in words 1-65537","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,,NIVEL_MEDIDO,"","REAL[10]","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,,TANQUES,"","TANQUES_TIPO2[6]","","(Constant := false, ExternalAccess := Read/Write)"
TAG,,TOV,"","REAL[10]","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,NAME,DESCRIPTION,DATATYPE,SPECIFIER,ATTRIBUTES
TAG,Modbus_Slave,Addr,"Start Address","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Bit15_Store_AND,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Bit15_Store_OR,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,BitEndC,"last bit to be effected","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Bitoper,"any bit operation","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,BitStartC,"First bit to be effected","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,BlankArray,"AND Mask","SINT[8]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ByteCount,"number of bytes for words","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ByteCount2,"number of bytes for bits","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,bytes_to_Check,"parameter passing","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,CharC,"","SERIAL_PORT_CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,check_bytes,"bytes minus CRCs","INT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Clear1,"always false","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,control_1,"","CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,control_2,"","CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,control_3,"","CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,control_4,"","CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,control_5,"","CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,control_6,"","CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Counter6,"diagnostic message counter","COUNTER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Counter7,"","COUNTER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,CRCgood,"CRC test","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,crchiad,"CRC hi byte - swapped","INT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,crcload,"CRC lo byte - swapped","INT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,DataHold,"used for swapping","INT[140]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,DataRec,"one shot","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,data_byte_being_checked,"in CRC routine","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,DATE_MM,"","DINT[7]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,diagnostic,"function code 8","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,DoubWordCount,"number of 32 bit words","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,EndAddr,"last bit or last word","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,EndWord,"last word","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Errfound,"command cannot be executed","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Escribiendomodbus_11,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Escribiendomodbus_22,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Escribiendomodbus_33,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,FuncFound,"function implemented","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Func_Code,"received function code","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Hold3,"delay chain","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Hold4,"delay chain","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,hora,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,initial,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,LCounter1,"loop counter for getting/putting data","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,LCounter2,"loop counter for swapping","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,leyendomodubus_11,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,leyendomodubus_22,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,leyendomodubus_33,"","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,MaskAnd,"single coil reset mask","INT[16]","","(RADIX := Binary, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,MaskOr,"single coil set mask","INT[16]","","(RADIX := Binary, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,maxCount,"diagostic message length","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,MsgCountRec,"Messages received","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,MsgCountTrans,"Messages sent","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,NodeFound2,"One shot","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,NonZeroBit,"odd byte count","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Notzero2,"remainder","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,off,"zero constant","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,pruebaxx,"","REAL","","(RADIX := Float, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Quantity,"number of bits / words","INT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ReadCoils,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ReadHReg,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ReadInputs,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ReadIRegisters,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,read_serial_port,"","SERIAL_PORT_CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,recdbytes,"# of bytes received","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Receive_Buffer,"Receive Buffer","SINT[260]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Receive_Buffer6_temp,"","INT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ShftArry,"","CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ShftIndex,"Shift Index","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ShiftArray,"Shift Array","DINT[50]","","(RADIX := Hex, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ShiftbitC,"Start shift bit","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,StartinAdd,"Starting Addr / Quantity","INT[2]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Store1,"message received","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Store1Count,"diagostic counter","COUNTER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Swapbuffer,"","INT[140]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,TableAddr,"Data Array Pointer","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,TargetByte,"Last byte in bit array","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Temp4,"swap buffer","INT[1]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,TestArray,"read/modify write","INT[140]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Test_return_high,"CRC return","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Test_return_low,"CRC return","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Timer6,"receive timer","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Timer7,"for diagnostic","TIMER","","(Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Trans_allbytes,"all bytes to be sent","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Trans_Buffer,"","SINT[264]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,Trans_bytes,"total bytes to send before CRC","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,ubytes,"CRC bytes","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,uchaCRCHi,"Look-up map","SINT[256]","","(RADIX := Hex, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,uchaCRCLo,"Look-up map","SINT[256]","","(RADIX := Hex, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,uchCRCHi,"","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,uchCRCLo,"","SINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,uIndex,"CRC Index","INT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,uLoop,"CRC loop","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,uno,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WordBoundary,"on word boundaries","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WordCount2,"words effected","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WordMaskE,"End Mask","INT[16]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WordMaskS,"Start Mask","INT[16]","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WordQuant,"difference [end-start]","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WordStart,"Word Start no offset","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WordStartC,"Word Start with offset","DINT","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WriteCoils,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WriteFound,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WriteOneCoil,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WriteRegs,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,WriteSingleReg,"","BOOL","","(RADIX := Decimal, Constant := false, ExternalAccess := Read/Write)"
TAG,Modbus_Slave,write_serial_port,"","SERIAL_PORT_CONTROL","","(Constant := false, ExternalAccess := Read/Write)"
TYPE,SCOPE,ROUTINE,COMMENT,OWNING_ELEMENT,LOCATION
RCOMMENT,"Modbus_Slave","MainRoutine","$NAll information provided  - No Warranty or implied merchantability. $NRefer to the RSLogix 5000 End User License Agreement (EULA) in the Release Notes.$N$N","NOP()","0"
RCOMMENT,"Modbus_Slave","MainRoutine","$N********************************$NRevision History$N********************************$NRelease 1.0 initial release$N********************************$NRelease 2.0.0 Modified by Commercial Engineering$N$NModified multiple rungs that caused arithmetic overflow minor faults, no functional change.$NImproved documentation.$NModifications to allow for addressing of Coils and Registers up to 65,535. This change also increased the size of the program from about 49K to 327K. This size can be reduced if you only need to read a smaller number of Coils and Registers.$NRenamed tag array Mod_DataHoldReg4 to Mod_Data_HoldReg4, no functional change.$NRenamed tag array Mod_RangeHoldReg4 to Mod_Range_HoldReg4, no functional change.$NRenamed tag array Mod_Range_Cont1 to Mod_Range_Contacts1, no functional change.$NModified serial port User Protocol Read/Write buffer size from 140 to 280 characters.$NIncreased range of reads and writes to cover documented values of 1-2000 bit and 1-120 register.$NResolved multiple issues with bit reads and writes.$NRemoved input modules from I/O tree, no functional change.$N********************************","NOP()","1"
RCOMMENT,"Modbus_Slave","NodeThere","This rung does a read/modify/write of Coils0 back to itself only manipulating one bit at a time. Bit 15 is not done through the OR because if using an OR with an indirectly addressed Dest, if the Dest ends up negative after the OR is executed an arithmetic overflow will occur and cause a minor fault.","OTL(Mod_Data_Coils0[WordStartC].15)","42"
RCOMMENT,"Modbus_Slave","NodeThere","This rung does a read/modify/write of Coils0 back to itself only manipulating one bit at a time. Bit 15 is not done through the AND because if using an AND with an indirectly addressed Dest, if the Dest ends up negative after the AND is executed an arithmetic overflow will occur and cause a minor fault.","OTU(Mod_Data_Coils0[WordStartC].15)","43"
RCOMMENT,"Modbus_Slave","WriteCoils","This rung does a read/modify/write of Coils0 to TestArray so that you can write to individual bits in the Coils0 file. Bit 15 is not done through the MVM because if using an MVM with an indirectly addressed Dest, if the Dest starts out positive and after the MVM is executed ends up negative an arithmetic overflow will occur and cause a minor fault.","OTU(TestArray[WordQuant].15)","3"
